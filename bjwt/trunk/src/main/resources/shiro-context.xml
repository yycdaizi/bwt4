<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:context="http://www.springframework.org/schema/context"
 xsi:schemaLocation="http://www.springframework.org/schema/beans 
 	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
 	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd ">

<bean
 class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations" value="classpath:shiro.properties"/>
</bean>
<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <property name="securityManager" ref="securityManager"/>
    <!-- override these for application-specific URLs if you like: -->
    <property name="loginUrl" value="/login.jsp"/>
    <property name="successUrl" value="/index.jsp"/>
    <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter
    bean -->
    <!-- defined will be automatically acquired and available via its beanName
    in chain -->
    <!-- definitions, but you can perform instance overrides or name aliases
    here if you like: -->
    <!-- <property name="filters"> <util:map> <entry key="anAlias" value-ref="someFilter"/>
    </util:map> </property> -->
    <property name="filterChainDefinitions">
        <value>
            /login = authc
            /user/** = anon
            /resourses/** = anon
            /** = user
            <!-- # some example chain definitions:
            /admin/** = authc, roles[admin]
            /docs/** = authc, perms[document:read]
            /** = authc
            # more URL-to-FilterChain definitions here -->
        </value>
    </property>
</bean>

<!-- Define any javax.servlet.Filter beans you want anywhere in this application
context. -->
<!-- They will automatically be acquired by the 'shiroFilter' bean above
and made available -->
<!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly
add them -->
<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for
more details. -->
<!--
<bean id="someFilter" class="..." />
<bean id="anotherFilter" class="..."></bean>
-->


<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <!-- Single realm app. If you have multiple realms, use the 'realms' property
    instead. -->
    <property name="realm" ref="customRealm"/>
    <!-- By default the servlet container sessions will be used. Uncomment
    this line to use shiro's native sessions (see the JavaDoc for more): -->
    <property name="sessionMode" value="native"/>
</bean>

<!-- Define the Shiro Realm implementation you want to use to connect to
your back-end -->
<!-- security datasource: -->
<bean id="customRealm" class="org.bjdrgs.bjwt.authority.service.impl.HqlAuthorityRealm">
</bean>

<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

<!-- Enable Shiro Annotations for Spring-configured beans. Only run after -->
<!-- the lifecycleBeanProcessor has run: -->
<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager"/>
</bean>

</beans>